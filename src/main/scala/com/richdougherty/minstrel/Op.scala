package com.richdougherty.minstrel

final case class Op(code: Int, name: String, word: Option[String])
object Op {
  val Halt = Op(0, "halt", Some("halt"))
  val Push = Op(1, "push", None)
  val Pop = Op(2, "pop", Some("pop"))
  val Dup = Op(3, "dup", Some("dup"))
  val Rot = Op(4, "rot", Some("rot"))
  val Ret = Op(5, "ret", Some("ret"))
  val Jmp = Op(6, "jmp", Some("jmp"))
  val Call = Op(7, "call", Some("call"))
  val If = Op(8, "if", Some("if"))
  val Neg = Op(9, "neg", Some("neg"))
  val Bnot = Op(10, "bnot", Some("~"))
  val Not = Op(11, "not", Some("!"))
  val Add = Op(12, "add", Some("+"))
  val Sub = Op(13, "sub", Some("-"))
  val Mul = Op(14, "mul", Some("*"))
  val Div = Op(15, "div", Some("/"))
  val Mod = Op(16, "mod", Some("%"))
  val Bor = Op(17, "bor", Some("|"))
  val Band = Op(18, "band", Some("&"))
  val Bxor = Op(19, "bxor", Some("^"))
  val Shl = Op(20, "shl", Some("<<"))
  val Sshr = Op(21, "sshr", Some(">>"))
  val Zshr = Op(22, "zshr", Some(">>>"))
  val Lt = Op(23, "lt", Some("<"))
  val Lte = Op(24, "lte", Some("<="))
  val Gt = Op(25, "gt", Some(">"))
  val Gte = Op(26, "gte", Some(">="))
  val Eq = Op(27, "eq", Some("=="))
  val Ne = Op(28, "ne", Some("!="))
  val Acos = Op(29, "acos", Some("acos"))
  val Atan = Op(30, "atan", Some("atan"))
  val Cos = Op(31, "cos", Some("cos"))
  val Sin = Op(32, "sin", Some("sin"))
  val Tan = Op(33, "tan", Some("tan"))
  val Ceil = Op(34, "ceil", Some("ceil"))
  val Floor = Op(35, "floor", Some("floor"))
  val Exp = Op(36, "exp", Some("exp"))
  val Log = Op(37, "log", Some("log"))
  val Sqrt = Op(38, "sqrt", Some("sqrt"))
  val Abs = Op(39, "abs", Some("abs"))
  val Atan2 = Op(40, "atan2", Some("atan2"))
  val Imul = Op(41, "imul", Some("imul"))
  val I8Store = Op(42, "i8store", Some(">i8"))
  val I8Load = Op(43, "i8load", Some("i8>"))
  val U8Store = Op(44, "u8store", Some(">u8"))
  val U8Load = Op(45, "u8load", Some("u8>"))
  val I16Store = Op(46, "i16store", Some(">i16"))
  val I16Load = Op(47, "i16load", Some("i16>"))
  val U16Store = Op(48, "u16store", Some(">u16"))
  val U16Load = Op(49, "u16load", Some("u16>"))
  val I32Store = Op(50, "i32store", Some(">i32"))
  val I32Load = Op(51, "i32load", Some("i32>"))
  val U32Store = Op(52, "u32store", Some(">u32"))
  val U32Load = Op(53, "u32load", Some("u32>"))
  val F32Store = Op(54, "f32store", Some(">f32"))
  val F32Load = Op(55, "f32load", Some("f32>"))
  val F64Store = Op(56, "f64store", Some(">f64"))
  val F64Load = Op(57, "f64load", Some("f64>"))

  val all = Seq(Halt, Push, Pop, Dup, Rot, Ret, Jmp, Call, If, Neg, Bnot, Not, Add, Sub, Mul, Div, Mod, Bor, Band, Bxor, Shl, Sshr, Zshr, Lt, Lte, Gt, Gte, Eq, Ne, Acos, Atan, Cos, Sin, Tan, Ceil, Floor, Exp, Log, Sqrt, Abs, Atan2, Imul, I8Store, I8Load, U8Store, U8Load, I16Store, I16Load, U16Store, U16Load, I32Store, I32Load, U32Store, U32Load, F32Store, F32Load, F64Store, F64Load)

  val byName: Map[String, Op] = Map(all.map(op => op.name -> op): _*)
  val byCode: Map[Int, Op] = Map(all.map(op => op.code -> op): _*)

}